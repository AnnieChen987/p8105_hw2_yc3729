---
title: "dplyer_example"
author: "Yineng Chen"
date: "2019/9/19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
rm(list=ls())
```

## import Data

```{r}
options(tibble.print_min = 3)

litters_data = read_csv("./data/FAS_litters.csv",
                      col_types = "ccddiiii")
litters_data = janitor::clean_names(litters_data)

pups_data = read_csv("./data/FAS_pups.csv",
                       col_types = "ciiiii")
pups_data = janitor::clean_names(pups_data)
```
```{r}
pull(litters_data,group)
```



## To select a subset of columns --- select()
1. select specific columns

select name of df, names of colummns
```{r}
select(litters_data, group, litter_number, gd0_weight, pups_born_alive)

select(litters_data, group, litter_number, gd0_weight, starts_with("pups"))


```

1. select a range of columns
```{r}
select(litters_data, group:gd_of_birth)
```

1. select colums to remove
```{r}
select(litters_data, -pups_survive)
```

1. rename variables as part of this process:

```{r}
select(litters_data, GROUP = group, LiTtEr_NuMbEr = litter_number)
```

11. use **rename** instead of **select**. This will rename the variables you care about, and keep everything else:
```{r}
rename(litters_data, GROUP = group, LiTtEr_NuMbEr = litter_number)
```

## filter
```{r}
filter(litters_data, group == "Con7")

filter(litters_data, group == "Con7", pups_born_alive >= 2)

filter(litters_data, group == "Con7"| pups_born_alive >= 2) # or

filter(litters_data, group %in% c("Con7","Mod8"))

filter(litters_data, gd0_weight + gd18_weight <70)

drop_na(litters_data,gd0_weight)
```


## muate

```{r}
mutate(litters_data,
  wt_gain = gd18_weight - gd0_weight,
  group = str_to_lower(group) )  # make all lowercase

mutate(litters_data,wt_gain = gd18_weight - gd0_weight)
```

## arrange
```{r}
head(arrange(litters_data, group, pups_born_alive), 10)

arrange(litters_data,pups_born_alive)

arrange(litters_data,desc(pups_born_alive))

arrange(litters_data,pups_born_alive,gd0_weight)
```

## %>% and then

```{r}
litters_data = 
  read_csv("./data/FAS_litters.csv", col_types = "ccddiiii") %>%
  janitor::clean_names() %>%
  select(-pups_survive) %>%
  mutate(
    wt_gain = gd18_weight - gd0_weight,
    group = str_to_lower(group)) %>% 
  drop_na(wt_gain)


```
 
 %>%  the keyboard shortcuts are Ctrl + Shift + M.
 
 
 the pipe will take the result of one function call and use that as the first argument of the next function call


using . as a placeholder for the result of the preceding call:

